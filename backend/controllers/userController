const jwt = require('jsonwebtoken')
const bcrypt = require('bcryptjs')
const asyncHandler = require('express-async-handler')
const User = require('../model/userModel')

// @desc Get User
// @route GET/api/users/me
// @access Private
const getUser =  asyncHandler(async(req,res)=> {
    const { _id, name, email } = await User.findById(req.user.id)

    res.status(200).json({
        id: _id,
        name,
        email,
    })
})

// @desc Register User
// @route POST/api/users/mregistration
// @access Public
const registration =  asyncHandler(async(req,res)=> {
   
    const {name, email, password} = req.body
    if(!name || !email || !password){
        res.status(400)
        throw new Error('Fill all the fields')
    }
    // check user exist
    const userExist = await User.findOne({email})
    
    if(userExist){
        console.log(userExist.email)
        res.status(400)
        throw new Error('User already exist')
    }
    console.error(`error: ${password}`)
    const salt = await bcrypt.genSalt(10)
    const hPass = await bcrypt.hash(password,salt)

    const user = await User.create({
        name,
        email, 
        password:hPass
    })
    console.error(`User: ${user}`)
    if(user) {
        res.status(201).json({
            _id: user.id,
            name: user.name,
            email: user.email,
            token : genToken(user.id)
        })
    }else {
        res.status(400)
        throw new Error('Invalid user data')
    }

    
})

// @desc Login User
// @route GET/api/users/mlogin
// @access Public
const login =  asyncHandler(async(req,res)=> {
    const {email, password} = req.body
    const user = await User.findOne({email})

    if(user && (await bcrypt.compare(password, user.password))){
        res.status(201).json({
            _id: user.id,
            name: user.name,
            email: user.email,
            token : genToken(user.id)
        })
    }else {
        res.status(400)
        throw new Error('Invalid Credentials')
    }

   
})

// Generate token
const genToken = (id)=> {
    return jwt.sign({ id }, process.env.JWT_SECRET,{
        expiresIn:'30d',
    })
}

module.exports = {
    getUser,
    registration, 
    login,
}